/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppBackdoor {
    }
    interface AppHome {
        /**
          * @default false
         */
        "autoplay": boolean;
        "challenge": string;
        "challengeImage": string;
    }
    interface AppProgress {
    }
    interface AppRoot {
    }
    interface CcTile {
        "removeFromCanvas": () => Promise<void>;
        "rotateLeft": () => Promise<void>;
        "rotateRight": () => Promise<void>;
        /**
          * @default 0
         */
        "rotation": number;
        /**
          * @default false
         */
        "selected": boolean;
        "tileId": string;
        "tileImage": string;
        "tileName": string;
        "tileSize": string;
        "variant": string;
        /**
          * @default 0
         */
        "zIndex": number;
    }
}
export interface CcTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCcTileElement;
}
declare global {
    interface HTMLAppBackdoorElement extends Components.AppBackdoor, HTMLStencilElement {
    }
    var HTMLAppBackdoorElement: {
        prototype: HTMLAppBackdoorElement;
        new (): HTMLAppBackdoorElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProgressElement extends Components.AppProgress, HTMLStencilElement {
    }
    var HTMLAppProgressElement: {
        prototype: HTMLAppProgressElement;
        new (): HTMLAppProgressElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCcTileElementEventMap {
        "cc-tile-clicked": any;
    }
    interface HTMLCcTileElement extends Components.CcTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCcTileElementEventMap>(type: K, listener: (this: HTMLCcTileElement, ev: CcTileCustomEvent<HTMLCcTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCcTileElementEventMap>(type: K, listener: (this: HTMLCcTileElement, ev: CcTileCustomEvent<HTMLCcTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCcTileElement: {
        prototype: HTMLCcTileElement;
        new (): HTMLCcTileElement;
    };
    interface HTMLElementTagNameMap {
        "app-backdoor": HTMLAppBackdoorElement;
        "app-home": HTMLAppHomeElement;
        "app-progress": HTMLAppProgressElement;
        "app-root": HTMLAppRootElement;
        "cc-tile": HTMLCcTileElement;
    }
}
declare namespace LocalJSX {
    interface AppBackdoor {
    }
    interface AppHome {
        /**
          * @default false
         */
        "autoplay"?: boolean;
        "challenge"?: string;
        "challengeImage"?: string;
    }
    interface AppProgress {
    }
    interface AppRoot {
    }
    interface CcTile {
        "onCc-tile-clicked"?: (event: CcTileCustomEvent<any>) => void;
        /**
          * @default 0
         */
        "rotation"?: number;
        /**
          * @default false
         */
        "selected"?: boolean;
        "tileId"?: string;
        "tileImage"?: string;
        "tileName"?: string;
        "tileSize"?: string;
        "variant"?: string;
        /**
          * @default 0
         */
        "zIndex"?: number;
    }
    interface IntrinsicElements {
        "app-backdoor": AppBackdoor;
        "app-home": AppHome;
        "app-progress": AppProgress;
        "app-root": AppRoot;
        "cc-tile": CcTile;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-backdoor": LocalJSX.AppBackdoor & JSXBase.HTMLAttributes<HTMLAppBackdoorElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-progress": LocalJSX.AppProgress & JSXBase.HTMLAttributes<HTMLAppProgressElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "cc-tile": LocalJSX.CcTile & JSXBase.HTMLAttributes<HTMLCcTileElement>;
        }
    }
}
